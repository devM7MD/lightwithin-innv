---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout title="ChatBot | LightWithin">
  <div
    class="max-w-5xl mx-auto pt-8 pb-8 px-4 min-h-screen bg-gradient-to-b from-blue-50 to-mint-50"
  >
    <div class="text-center mb-8">
      <div class="relative w-24 h-24 mx-auto mb-4">
        <div
          class="absolute inset-0 bg-gradient-to-r from-blue-400 to-mint-400 rounded-full animate-pulse"
        >
        </div>
        <div class="absolute inset-1 bg-white rounded-full"></div>
        <div
          class="absolute inset-2 bg-gradient-to-r from-blue-50 to-mint-50 rounded-full flex items-center justify-center"
        >
          <span class="text-2xl font-bold text-mint-600">L</span>
        </div>
      </div>
      <h1 class="text-3xl font-bold text-gray-800 mb-2">
        LightWithin Assistant
      </h1>
      <p class="text-gray-600">
        Supporting new mothers through their parenting journey
      </p>
    </div>

    <div
      class="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100"
    >
      <div
        id="chat-messages"
        class="p-6 h-[500px] overflow-y-auto space-y-6 bg-gradient-to-br from-gray-50 to-white"
      >
        <div class="flex items-start space-x-3">
          <div class="flex-shrink-0">
            <div
              class="bg-gradient-to-r from-blue-400 to-mint-400 rounded-full w-10 h-10 flex items-center justify-center shadow-lg"
            >
              <span class="text-white font-bold text-lg">L</span>
            </div>
          </div>
          <div
            class="bg-gradient-to-r from-blue-50 to-mint-50 rounded-2xl p-4 max-w-md shadow-sm"
          >
            <p class="text-gray-700 leading-relaxed">
              Hello! I'm your LightWithin assistant. I'm here to support you through your motherhood journey. How can I help you today?
            </p>
          </div>
        </div>
      </div>

      <div class="border-t border-gray-100 p-4 bg-white">
        <form id="chat-form" class="flex space-x-3">
          <input
            type="text"
            id="message-input"
            placeholder="Type your message here..."
            class="flex-1 p-4 bg-gray-50 border-0 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 transition-shadow text-gray-700 placeholder-gray-400"
          />
          <button
            type="submit"
            class="bg-gradient-to-r from-blue-500 to-mint-500 hover:from-blue-600 hover:to-mint-600 text-white px-6 py-4 rounded-xl transition-all duration-200 shadow-md hover:shadow-lg flex items-center space-x-2 font-medium"
          >
            <span>Send</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"
              ></path>
            </svg>
          </button>
        </form>
      </div>
    </div>

    <div class="mt-8">
      <h2
        class="text-xl font-bold text-gray-800 mb-4 flex items-center space-x-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 text-mint-500"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
          ></path>
        </svg>
        <span>Suggested Topics</span>
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="suggested-topics">
        <button
          class="bg-gradient-to-r from-blue-50 to-mint-50 hover:from-blue-100 hover:to-mint-100 p-4 rounded-xl text-left transition-all duration-200 shadow-sm hover:shadow-md group"
        >
          <div class="flex items-center space-x-3">
            <div
              class="bg-blue-100 rounded-lg p-2 group-hover:bg-blue-200 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-blue-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                ></path>
              </svg>
            </div>
            <span class="font-medium text-gray-700">Postpartum sleep tips</span>
          </div>
        </button>

        <button
          class="bg-gradient-to-r from-blue-50 to-mint-50 hover:from-blue-100 hover:to-mint-100 p-4 rounded-xl text-left transition-all duration-200 shadow-sm hover:shadow-md group"
        >
          <div class="flex items-center space-x-3">
            <div
              class="bg-mint-100 rounded-lg p-2 group-hover:bg-mint-200 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-mint-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                ></path>
              </svg>
            </div>
            <span class="font-medium text-gray-700">Self-care practices</span>
          </div>
        </button>

        <button
          class="bg-gradient-to-r from-blue-50 to-mint-50 hover:from-blue-100 hover:to-mint-100 p-4 rounded-xl text-left transition-all duration-200 shadow-sm hover:shadow-md group"
        >
          <div class="flex items-center space-x-3">
            <div
              class="bg-purple-100 rounded-lg p-2 group-hover:bg-purple-200 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-purple-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
            </div>
            <span class="font-medium text-gray-700">Managing baby blues</span>
          </div>
        </button>

        <button
          class="bg-gradient-to-r from-blue-50 to-mint-50 hover:from-blue-100 hover:to-mint-100 p-4 rounded-xl text-left transition-all duration-200 shadow-sm hover:shadow-md group"
        >
          <div class="flex items-center space-x-3">
            <div
              class="bg-green-100 rounded-lg p-2 group-hover:bg-green-200 transition-colors"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-green-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
                ></path>
              </svg>
            </div>
            <span class="font-medium text-gray-700">Building support networks</span>
          </div>
        </button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const chatForm = document.getElementById("chat-form");
      const messageInput = document.getElementById("message-input");
      const chatMessages = document.getElementById("chat-messages");
      const suggestedTopics = document.getElementById("suggested-topics");

      // Replace with your Gemini API key
      const GEMINI_API_KEY = "AIzaSyBvlNbXDH4zKl8_L76D7xbBNH40e3OAEjI";
      const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

      const systemPrompt = `You are a supportive assistant for new mothers from LightWithin. 
      Your role is to provide helpful, evidence-based advice about maternal mental health, 
      postpartum care, and new parent wellbeing. Always maintain a compassionate, supportive, 
      and professional tone. Keep responses concise and practical. Emphasize self-care, 
      seeking support, and normalizing the challenges of new motherhood. For serious mental 
      health concerns, gently recommend consulting a healthcare professional.
      
      When you want to emphasize important information, use markdown-style formatting:
      - Use *single asterisks* around moderately important text
      - Use **double asterisks** around very important text
      - Start sentences with phrases like "Important to remember:" or "Key point:" for critical information
      
      This formatting will be rendered visually to help users identify the most important parts of your responses.`;

      let conversationHistory = [
        {
          role: "model",
          parts: [{ text: systemPrompt }]
        }
      ];

      async function getChatResponse(userMessage) {
        try {
          // Add user message to history
          conversationHistory.push({
            role: "user",
            parts: [{ text: userMessage }]
          });

          const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              contents: conversationHistory,
              generationConfig: {
                temperature: 0.7,
                maxOutputTokens: 800,
                topP: 0.95,
                topK: 40
              }
            })
          });

          if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
          }

          const data = await response.json();
          const assistantResponse = data.candidates[0].content.parts[0].text;

          // Update conversation history with assistant's response
          conversationHistory.push({
            role: "model",
            parts: [{ text: assistantResponse }]
          });

          // Keep history at a reasonable length
          if (conversationHistory.length > 11) { // System prompt + 5 exchanges
            conversationHistory = [
              conversationHistory[0], // Keep system prompt
              ...conversationHistory.slice(-10) // Keep last 10 messages
            ];
          }

          return assistantResponse;
        } catch (error) {
          console.error("Error calling Gemini API:", error);
          return "I apologize, but I encountered an error. Please try again in a moment.";
        }
      }

      function addMessage(content, isUser = false) {
        const messageDiv = document.createElement("div");
        messageDiv.className = "flex items-start space-x-3";

        // Format important information with emphasis
        if (!isUser) {
          // Look for text that might be important and add emphasis
          content = content.replace(/\*(.*?)\*/g, '<em class="font-medium text-mint-700">$1</em>');
          content = content.replace(/\*\*(.*?)\*\*/g, '<strong class="text-blue-700">$1</strong>');
          
          // Add emphasis to phrases that indicate important information
          const importantPhrases = [
            "important to remember", "key point", "essential", "remember that",
            "critical", "vital", "significant", "research shows", "studies indicate",
            "experts recommend", "best practice"
          ];
          
          importantPhrases.forEach(phrase => {
            const regex = new RegExp(`(${phrase}\\s*:?\\s*[^.!?]*[.!?])`, 'gi');
            content = content.replace(regex, '<span class="bg-blue-50 text-blue-800 px-1 rounded">$1</span>');
          });
        }

        if (isUser) {
          messageDiv.innerHTML = `
            <div class="ml-auto">
              <div class="bg-gradient-to-r from-blue-500 to-mint-500 rounded-2xl p-4 max-w-md text-white shadow-sm">
                <p class="leading-relaxed">${content}</p>
              </div>
            </div>
          `;
        } else {
          messageDiv.innerHTML = `
            <div class="flex-shrink-0">
              <div class="bg-gradient-to-r from-blue-400 to-mint-400 rounded-full w-10 h-10 flex items-center justify-center shadow-lg">
                <span class="text-white font-bold text-lg">L</span>
              </div>
            </div>
            <div class="bg-gradient-to-r from-blue-50 to-mint-50 rounded-2xl p-4 max-w-md shadow-sm">
              <p class="text-gray-700 leading-relaxed">${content}</p>
            </div>
          `;
        }

        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }

      // Add loading indicator
      function showLoadingIndicator() {
        const loadingDiv = document.createElement("div");
        loadingDiv.id = "loading-indicator";
        loadingDiv.className = "flex items-start space-x-3";
        loadingDiv.innerHTML = `
          <div class="flex-shrink-0">
            <div class="bg-gradient-to-r from-blue-400 to-mint-400 rounded-full w-10 h-10 flex items-center justify-center shadow-lg">
              <span class="text-white font-bold text-lg">L</span>
            </div>
          </div>
          <div class="bg-gradient-to-r from-blue-50 to-mint-50 rounded-2xl p-4 max-w-md shadow-sm">
            <div class="flex space-x-2">
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
              <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
            </div>
          </div>
        `;
        chatMessages.appendChild(loadingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }

      function removeLoadingIndicator() {
        const loadingIndicator = document.getElementById("loading-indicator");
        if (loadingIndicator) {
          loadingIndicator.remove();
        }
      }

      chatForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const message = messageInput.value.trim();

        if (message) {
          // Add user message
          addMessage(message, true);

          // Clear input
          messageInput.value = "";

          // Show loading indicator
          showLoadingIndicator();

          // Get and display AI response
          const response = await getChatResponse(message);
          removeLoadingIndicator();
          addMessage(response);
        }
      });

      // Handle suggested topics
      if (suggestedTopics) {
        suggestedTopics.querySelectorAll("button").forEach((button) => {
          button.addEventListener("click", async () => {
            const topic = button.querySelector("span").textContent.trim();
            addMessage(topic, true);

            showLoadingIndicator();
            const response = await getChatResponse(topic);
            removeLoadingIndicator();
            addMessage(response);
          });
        });
      }
    });
  </script>
</MainLayout>
