---
import MainLayout from "../layouts/MainLayout.astro";
import ChildForm from "../components/child/ChildForm";
import ChildCard from "../components/child/ChildCard.jsx";
---

<MainLayout title="Child Management | LightWithin">
  <div class="max-w-6xl mx-auto pt-8 pb-16 px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <div class="relative w-24 h-24 mx-auto mb-4">
        <div
          class="absolute inset-0 bg-gradient-to-r from-blue-400 to-teal-400 rounded-full animate-pulse"
        >
        </div>
        <div class="absolute inset-1 bg-white rounded-full"></div>
        <div
          class="absolute inset-2 bg-gradient-to-r from-blue-50 to-teal-50 rounded-full"
        >
        </div>
      </div>
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Child Management</h1>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Track and manage your children's well-being journey with ease.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-100">
        <div class="mb-6">
          <h2
            class="text-xl font-semibold text-gray-800 flex items-center gap-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6 text-blue-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add New Child
          </h2>
          <p class="text-gray-600 text-sm">
            Enter your child's information below
          </p>
        </div>
        <ChildForm client:load />
      </div>

      <div>
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-100">
          <div class="mb-6">
            <h2
              class="text-xl font-semibold text-gray-800 flex items-center gap-2"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-teal-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
                ></path>
              </svg>
              Your Children
            </h2>
            <p class="text-gray-600 text-sm">Manage your children's profiles</p>
          </div>
          <div id="childrenList" class="space-y-4">
            <div class="animate-pulse flex justify-center items-center py-8">
              <div
                class="w-8 h-8 border-4 border-blue-200 rounded-full border-t-blue-500 animate-spin"
              >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { db, auth } from "../utils/firebase";
    import {
      collection,
      addDoc,
      getDocs,
      deleteDoc,
      doc,
      query,
      where,
      updateDoc,
    } from "firebase/firestore";

    let currentUser = null;

    async function loadChildren() {
      if (!currentUser) return;

      try {
        const userDocRef = doc(db, "users", currentUser.uid);
        const childrenRef = collection(userDocRef, "children");

        const querySnapshot = await getDocs(childrenRef);
        const children = [];

        querySnapshot.forEach((doc) => {
          children.push({ id: doc.id, ...doc.data() });
        });

        renderChildren(children);
      } catch (error) {
        console.error("Error loading children:", error);
      }
    }

    async function addChild(childData) {
      if (!currentUser) {
        alert("Please login to add a child");
        return;
      }

      try {
        const userDocRef = doc(db, "users", currentUser.uid);
        const childrenRef = collection(userDocRef, "children");

        const docRef = await addDoc(childrenRef, {
          ...childData,
          createdAt: new Date(),
          userId: currentUser.uid,
        });

        console.log("Child added successfully with ID:", docRef.id);
        loadChildren();
        return docRef.id;
      } catch (error) {
        console.error("Error adding child:", error);
        alert("Failed to add child. Please try again.");
      }
    }

    async function deleteChild(childId) {
      if (!currentUser) return;

      if (confirm("Are you sure you want to delete this child profile?")) {
        try {
          const childRef = doc(
            db,
            "users",
            currentUser.uid,
            "children",
            childId
          );
          await deleteDoc(childRef);
          loadChildren();
        } catch (error) {
          console.error("Error deleting child:", error);
          alert("Failed to delete child. Please try again.");
        }
      }
    }

    function renderChildren(children) {
      const childrenList = document.getElementById("childrenList");
      if (!childrenList) return;

      if (children.length === 0) {
        childrenList.innerHTML = `
          <div class="text-center py-8">
            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
            </div>
            <p class="text-gray-500 mb-2">No children added yet</p>
            <p class="text-gray-400 text-sm">Add your first child using the form</p>
          </div>
        `;
        return;
      }

      childrenList.innerHTML = children
        .map(
          (child) => `
        <div class="bg-gradient-to-r from-blue-50 to-teal-50 rounded-xl p-6 transition-all duration-300 hover:shadow-lg">
          <div class="flex justify-between items-start">
            <div>
              <h3 class="text-lg font-semibold text-gray-800">${child.name}</h3>
              <div class="flex gap-4 mt-1">
                <p class="text-sm text-gray-600">${child.gender}</p>
                <p class="text-sm text-gray-600">${new Date(child.birthdate).toLocaleDateString()}</p>
              </div>
            </div>
            <div class="flex space-x-2">
              <button 
                class="text-blue-500 hover:text-blue-700 transition-colors duration-200"
                data-edit="${child.id}"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </button>
              <button 
                class="text-red-500 hover:text-red-700 transition-colors duration-200"
                data-delete="${child.id}"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </div>
          
          <div class="mt-6 grid grid-cols-2 gap-4">
            <div class="bg-white/50 backdrop-blur-sm p-3 rounded-lg">
              <span class="text-sm font-medium text-gray-700">Sleep Quality</span>
              <p class="text-gray-600">${child.sleepQuality || "Not specified"}</p>
            </div>
            <div class="bg-white/50 backdrop-blur-sm p-3 rounded-lg">
              <span class="text-sm font-medium text-gray-700">Appetite</span>
              <p class="text-gray-600">${child.appetite || "Not specified"}</p>
            </div>
            <div class="bg-white/50 backdrop-blur-sm p-3 rounded-lg">
              <span class="text-sm font-medium text-gray-700">Social Behavior</span>
              <p class="text-gray-600">${child.socialBehavior || "Not specified"}</p>
            </div>
            <div class="bg-white/50 backdrop-blur-sm p-3 rounded-lg">
              <span class="text-sm font-medium text-gray-700">Health Status</span>
              <p class="text-gray-600">${child.healthStatus || "Not specified"}</p>
            </div>
          </div>
        </div>
      `
        )
        .join("");

      // Add event listeners
      document.querySelectorAll("[data-delete]").forEach((button) => {
        button.addEventListener("click", () => {
          deleteChild(button.getAttribute("data-delete"));
        });
      });
    }

    // Check authentication status
    auth.onAuthStateChanged((user) => {
      currentUser = user;
      if (user) {
        loadChildren();
        window.addChild = addChild;
      } else {
        const childrenList = document.getElementById("childrenList");
        if (childrenList) {
          childrenList.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-500">Please login to manage children</p>
            </div>
          `;
        }
      }
    });

    // Make functions available globally
    window.deleteChild = deleteChild;
  </script>
</MainLayout>
